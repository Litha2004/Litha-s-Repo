public class GradeBook {
    private double[] scores;
    private int scoresSize;

    public GradeBook(int capacity) {
        scores = new double[capacity];
        scoresSize = 0;
    }

    public boolean addScore(double score) {
        if (scoresSize < scores.length) {
            scores[scoresSize] = score;
            scoresSize++;
            return true;
        }
        return false;
    }

    public double sum() {
        double total = 0;
        for (int i = 0; i < scoresSize; i++) {
            total += scores[i];
        }
        return total;
    }

    public double minimum() {
        if (scoresSize == 0) return 0;
        double smallest = scores[0];
        for (int i = 1; i < scoresSize; i++) {
            if (scores[i] < smallest) {
                smallest = scores[i];
            }
        }
        return smallest;
    }

    public double finalScore() {
        if (scoresSize == 0) return 0;
        if (scoresSize == 1) return scores[0];
        return sum() - minimum();
    }

    @Override
    public String toString() {
        StringBuilder result = new StringBuilder();
        for (int i = 0; i < scoresSize; i++) {
            result.append(scores[i]).append(" ");
        }
        return result.toString();
    }

    public int getScoreSize() {
        return scoresSize;
    }
}
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

class GradeBookTester {

	private GradeBook g1;

	@BeforeEach
	void setUp() throws Exception {
		// Initialize GradeBook with a capacity of 5 scores
		g1 = new GradeBook(5);
		g1.addScore(50.0);
		g1.addScore(75.0);
	}

	@AfterEach
	void tearDown() throws Exception {
		// Set GradeBook object to null
		g1 = null;
	}

	@Test
	void testAddScore() {
		// Verify the contents of the scores array using toString
		assertTrue(g1.toString().equals("50.0 75.0 "), "The scores do not match expected values.");
	}

	@Test
	void testSum() {
		// Compare the returned sum to the expected sum
		assertEquals(125.0, g1.sum(), 0.0001, "Sum calculation is incorrect.");
	}

	@Test
	void testMinimum() {
		// Compare the returned minimum to the expected minimum
		assertEquals(50.0, g1.minimum(), 0.001, "Minimum score calculation is incorrect.");
	}

	@Test
	void testFinalScore() {
		// Add additional scores to calculate the final score correctly
		g1.addScore(80.0);
		g1.addScore(90.0);

		// Expected final score = sum(50 + 75 + 80 + 90) - minimum(50) = 295 - 50 = 245
		assertEquals(245.0, g1.finalScore(), 0.001, "Final score calculation is incorrect.");
	}
}
